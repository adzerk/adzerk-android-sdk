apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        test.setRoot('src/test')
    }
}

// Bintray package version
version =  "${versionMajor}.${versionMinor}.${versionPatch}"

bintray {
    user = BINTRAY_USER
    key = BINTRAY_API_KEY

    configurations = ['archives']
    pkg {
        userOrg = BINTRAY_USERORG
        repo = BINTRAY_REPO
        name = 'com.adzerk.android.sdk'
        desc = 'Adzerk Android SDK'
        websiteUrl = GITHUB_URL
        issueTrackerUrl = GITHUB_URL + '/issues'
        vcsUrl = GITHUB_GIT
        licenses = [LICENSE_NAME]
        labels = ['aar', 'android', 'library', 'adzerk', 'sdk', 'advertising']
        publicDownloadNumbers = false
    }
}

// Maven groupId
group = 'com.adzerk'

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'com.adzerk.android.sdk'
                url GITHUB_URL
                licenses {
                    license {
                        name LICENSE_NAME
                        url LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id  GITHUB_ID
                        name GITHUB_NAME
                        email GITHUB_EMAIL
                    }
                }
                scm {
                    connection GITHUB_GIT
                    developerConnection GITHUB_GIT
                    url GITHUB_URL
                }
            }
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:2.6.0'
    testCompile 'org.mockito:mockito-core:2.8.47'
    testCompile 'org.robolectric:robolectric:3.3.1'
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    title 'Adzerk SDK v' + version
    options.addStringOption('Xdoclint:none', '-quiet')
    exclude 'com/adzerk/android/sdk/rest/AdzerkService.java'
    exclude 'com/adzerk/android/sdk/rest/ContentData.java'
    exclude 'com/adzerk/android/sdk/rest/UserProperties.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
