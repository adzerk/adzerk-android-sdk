apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.android.library'

def versionMajor = 2
def versionMinor = 3
def versionPatch = 1
def versionBuild = 0

group = 'com.adzerk'
version =  "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 32
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    buildTypes {
        release {
            // buildConfigField("String", "VERSION_NAME", version)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        test.setRoot('src/test')
    }
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        minGranularity 2
        maxGranularity 3
    }
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.adzerk'
                artifactId = 'com.adzerk.android.sdk'
                version = version
            }

            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = 'com.adzerk'
                artifactId = 'com.adzerk.android.sdk'
                version = version
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name 'Adzerk Android Decision SDK'
                packaging 'aar'
                description 'Adzerk Android Decision SDK'
                url 'https://github.com/adzerk/adzerk-android-sdk'

                scm {
                    connection 'scm:git:git://github.com/adzerk/adzerk-android-sdk.git'
                    developerConnection 'scm:git:ssh://github.com/adzerk/adzerk-android-sdk.git'
                    url 'https://github.com/adzerk/adzerk-android-sdk'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'CrshOverride'
                        name 'Justin Niessner'
                        email = 'engineering@adzerk.com'
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.9'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:2.6.0'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation 'org.robolectric:robolectric:3.3.1'
    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.14.9'
    testImplementation project(path: ':sdk')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    title 'Adzerk SDK v' + version
    options.addStringOption('Xdoclint:none', '-quiet')
    exclude 'com/adzerk/android/sdk/rest/AdzerkService.java'
    exclude 'com/adzerk/android/sdk/rest/ContentData.java'
    exclude 'com/adzerk/android/sdk/rest/UserProperties.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}

signing {
    sign configurations.archives
}
